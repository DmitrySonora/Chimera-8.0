import pytest

from actors.generation_actor import GenerationActor
from config.prompts import MODE_GENERATION_PARAMS


class TestPydanticIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Pydantic –∏ —Ä–µ–∂–∏–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    @pytest.mark.asyncio
    async def test_pydantic_validation_in_generation(self):
        """–¢–µ—Å—Ç Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ GenerationActor"""
        actor = GenerationActor()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from config.logging import get_logger
        actor.logger = get_logger("test")
        from utils.event_utils import EventVersionManager
        actor._event_version_manager = EventVersionManager()
        
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        valid_data = {
            "response": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            "emotional_tone": "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
            "engagement_level": 0.8
        }
        is_valid, errors = await actor._validate_structured_response(valid_data, mode="talk")
        assert is_valid is True
        assert len(errors) == 0
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–∞")
        
        # –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        invalid_data = {
            "response": "",  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            "confidence": "–≤—ã—Å–æ–∫–∞—è"  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ
        }
        is_valid, errors = await actor._validate_structured_response(invalid_data, mode="expert")
        assert is_valid is False
        assert len(errors) > 0
        assert any("response" in error for error in errors)
        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {errors[:2]}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ creative —Ä–µ–∂–∏–º–∞
        creative_data = {
            "response": "–î—Ä–∞–∫–æ–Ω —Å–ø–∞–ª –Ω–∞ –æ–±–ª–∞–∫–µ",
            "style_markers": ["–º–µ—Ç–∞—Ñ–æ—Ä–∞", "–ø–µ—Ä—Å–æ–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è"],
            "metaphors": ["–æ–±–ª–∞–∫–æ –∏–∑ —Å–Ω–æ–≤"]
        }
        is_valid, errors = await actor._validate_structured_response(creative_data, mode="creative")
        assert is_valid is True
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è creative —Ä–µ–∂–∏–º–∞ —É—Å–ø–µ—à–Ω–∞")
    
    @pytest.mark.asyncio
    async def test_mode_parameters_application(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print("\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤:\n")
        
        for mode, params in MODE_GENERATION_PARAMS.items():
            print(f"–†–µ–∂–∏–º '{mode}':")
            print(f"  ‚Ä¢ temperature: {params.get('temperature', 'default')}")
            print(f"  ‚Ä¢ top_p: {params.get('top_p', 'default')}")
            print(f"  ‚Ä¢ max_tokens: {params.get('max_tokens', 'default')}")
            print(f"  ‚Ä¢ frequency_penalty: {params.get('frequency_penalty', 'default')}")
            print(f"  ‚Ä¢ presence_penalty: {params.get('presence_penalty', 'default')}")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        talk_temp = MODE_GENERATION_PARAMS["talk"]["temperature"]
        expert_temp = MODE_GENERATION_PARAMS["expert"]["temperature"]
        creative_temp = MODE_GENERATION_PARAMS["creative"]["temperature"]
        
        assert talk_temp != expert_temp, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã talk –∏ expert –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è"
        assert expert_temp != creative_temp, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã expert –∏ creative –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è"
        assert expert_temp < talk_temp, "Expert –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º —á–µ–º talk"
        
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])