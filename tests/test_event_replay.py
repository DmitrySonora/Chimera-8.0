import asyncio
from datetime import datetime, timedelta, timezone
from services.event_replay_service import EventReplayService
from database.connection import db_connection

async def test_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EventReplayService"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EventReplayService...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    print("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
    await db_connection.connect()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        print("üîß –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
        service = EventReplayService(db_connection)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º user_id (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
        user_id = "502312936"  # <-- –ó–ê–ú–ï–ù–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ô ID
        
        # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        end_date = datetime.now(timezone.utc)
        start_date = end_date - timedelta(days=7)
        
        # 1. –¢–µ—Å—Ç replay_user_events
        print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º replay_user_events...")
        events = await service.replay_user_events(
            user_id=user_id,
            start_date=start_date,
            end_date=end_date
        )
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        if events:
            print(f"   –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {events[0].event_type}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: {events[-1].event_type}")
        
        # 2. –¢–µ—Å—Ç get_ltm_usage_stats
        print("\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º get_ltm_usage_stats...")
        stats = await service.get_ltm_usage_stats(
            user_id=user_id,
            period=(start_date, end_date)
        )
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LTM:")
        print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
        print(f"   LTM –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['ltm_queries']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å LTM: {stats['ltm_percentage']:.1f}%")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ LTM: {stats['saved_to_ltm']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['avg_memories_per_query']:.2f}")
        
        # 3. –¢–µ—Å—Ç get_trigger_distribution
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º get_trigger_distribution...")
        triggers = await service.get_trigger_distribution()
        print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:")
        for trigger, count in triggers.items():
            print(f"   {trigger}: {count}")
        
        # 4. –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
        metrics = service.get_metrics()
        print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞:")
        print(f"   –í—Å–µ–≥–æ replay: {metrics['total_replays']}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {metrics['total_events_processed']}")
        print(f"   –û—à–∏–±–æ–∫ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: {metrics['decompression_errors']}")
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        print("\nüîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ë–î...")
        await db_connection.disconnect()
        print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_service())