"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç PersonalityAnalysisMixin –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –∏–∑ –ë–î.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Partner Persona.
–ó–∞–ø—É—Å–∫: pytest tests/test_personality_analysis.py -v -s
"""
import asyncio
import pytest
import json
import time
from datetime import datetime

from database.connection import db_connection
from database.redis_connection import redis_connection
from actors.actor_system import ActorSystem
from actors.talk_model_actor import TalkModelActor
from actors.user_session import UserSessionActor
from actors.memory_actor import MemoryActor
from actors.generation_actor import GenerationActor
from actors.auth import AuthActor
from actors.perception_actor import PerceptionActor
from actors.messages import ActorMessage, MESSAGE_TYPES
from services.style_analyzer import StyleAnalyzer
from services.trait_detector import TraitDetector
from services.partner_persona_builder import PartnerPersonaBuilder
from config.settings import (
    PERSONALITY_ANALYSIS_TRIGGER_COUNT,
    PERSONALITY_ANALYSIS_MESSAGE_LIMIT,
    PERSONALITY_ANALYSIS_MIN_MESSAGES
)


class TestPersonalityAnalysisIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç PersonalityAnalysisMixin –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
    
    @pytest.mark.asyncio
    async def test_full_personality_analysis_cycle(self):
        """
        –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏:
        1. –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        2. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ 10-–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        3. –í—ã–∑–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        4. –û—Ç–ø—Ä–∞–≤–∫–∞ UPDATE_PARTNER_MODEL
        5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Partner Persona
        6. –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
        """
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –†–ï–ê–õ–¨–ù–û–ô –ë–î –∏ Redis
        if not db_connection._is_connected:
            await db_connection.connect()
        
        if not redis_connection.is_connected():
            await redis_connection.connect()
            
        # –†–ï–ê–õ–¨–ù–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
        REAL_USER_ID = "502312936"
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–∫—Ç–æ—Ä–æ–≤
        system = ActorSystem("test-personality-system")
        await system.create_and_set_event_store()
        
        # –°–æ–∑–¥–∞–µ–º –í–°–ï –∞–∫—Ç–æ—Ä—ã
        talk_model = TalkModelActor()
        user_session = UserSessionActor()
        memory = MemoryActor()
        generation = GenerationActor()
        auth = AuthActor()
        perception = PerceptionActor("perception")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        await system.register_actor(talk_model)
        await system.register_actor(user_session)
        await system.register_actor(memory)
        await system.register_actor(generation)
        await system.register_actor(auth)
        await system.register_actor(perception)
        
        await system.start()
        
        try:
            print(f"\n{'='*80}")
            print("–¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –õ–ò–ß–ù–û–°–¢–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
            print(f"{'='*80}")
            
            # ========== 1. –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ==========
            print(f"\n1. –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {REAL_USER_ID}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ STM
            msg_count = await db_connection.get_pool().fetchval(
                "SELECT COUNT(*) FROM stm_buffer WHERE user_id = $1",
                REAL_USER_ID
            )
            print(f"‚úì –°–æ–æ–±—â–µ–Ω–∏–π –≤ STM: {msg_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–ª—è TraitDetector)
            bot_msg_count = await db_connection.get_pool().fetchval(
                "SELECT COUNT(*) FROM stm_buffer WHERE user_id = $1 AND message_type = 'bot'",
                REAL_USER_ID
            )
            print(f"‚úì –û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –≤ STM: {bot_msg_count}")
            
            # –°—Ç–∞—Ä–∞—è Partner Persona (–µ—Å–ª–∏ –µ—Å—Ç—å)
            old_persona = await db_connection.get_pool().fetchrow(
                """
                SELECT persona_id, style_vector, recommended_mode, mode_confidence, version
                FROM partner_personas 
                WHERE user_id = $1 AND is_active = true
                """,
                REAL_USER_ID
            )
            
            if old_persona:
                print("\n‚úì –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–µ—Ä—Å–æ–Ω–∞:")
                print(f"  - version: {old_persona['version']}")
                print(f"  - mode: {old_persona['recommended_mode']}")
                print(f"  - confidence: {old_persona['mode_confidence']}")
                old_style = json.loads(old_persona['style_vector']) if isinstance(old_persona['style_vector'], str) else old_persona['style_vector']
                print(f"  - style: playfulness={old_style['playfulness']:.2f}, seriousness={old_style['seriousness']:.2f}")
            else:
                print("\n‚úó –ê–∫—Ç–∏–≤–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã –Ω–µ—Ç")
            
            # –û—á–∏—â–∞–µ–º Redis –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞
            redis_client = await redis_connection.get_client()
            if redis_client:
                cache_key = f"partner_persona:{REAL_USER_ID}"
                await redis_client.delete(cache_key)
                print("‚úì Redis –∫—ç—à –æ—á–∏—â–µ–Ω")
            
            # ========== 2. –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ==========
            print("\n2. –ù–ê–°–¢–†–û–ô–ö–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            all_messages = []
            original_send = system.send_message
            
            async def tracking_send(actor_id, message):
                all_messages.append({
                    'to': actor_id,
                    'type': message.message_type,
                    'from': message.sender_id,
                    'payload': message.payload,
                    'timestamp': datetime.now()
                })
                await original_send(actor_id, message)
            
            system.send_message = tracking_send
            print("‚úì –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            
            # ========== 3. –ü–†–û–í–ï–†–ö–ê –°–ß–ï–¢–ß–ò–ö–ê ==========
            print("\n3. –ü–†–û–í–ï–†–ö–ê –ò–ù–ö–†–ï–ú–ï–ù–¢–ê –°–ß–ï–¢–ß–ò–ö–ê")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
            session = user_session._sessions.get(REAL_USER_ID)
            initial_count = session.message_count if session else 0
            print(f"–ù–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫: {initial_count}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
            # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ 0, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
            if initial_count == 0:
                messages_to_send = PERSONALITY_ANALYSIS_TRIGGER_COUNT  # 10
            else:
                messages_to_send = PERSONALITY_ANALYSIS_TRIGGER_COUNT - (initial_count % PERSONALITY_ANALYSIS_TRIGGER_COUNT)
                
            print(f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {messages_to_send}")
            
            # ========== 4. –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========
            print("\n4. –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ò –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê")
            
            for i in range(messages_to_send):
                print(f"\n–°–æ–æ–±—â–µ–Ω–∏–µ {i+1}/{messages_to_send}:")
                
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
                all_messages.clear()
                
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏
                session_before = user_session._sessions.get(REAL_USER_ID)
                count_before = session_before.message_count if session_before else 0
                print(f"  –°—á–µ—Ç—á–∏–∫ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏: {count_before}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_msg = ActorMessage.create(
                    sender_id="telegram",
                    message_type=MESSAGE_TYPES['USER_MESSAGE'],
                    payload={
                        'user_id': REAL_USER_ID,
                        'chat_id': int(REAL_USER_ID),
                        'text': f"–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ #{i+1}. –í—Ä–µ–º—è: {datetime.now()}",
                        'username': "dmitrii"
                    }
                )
                
                await system.send_message("user_session", test_msg)
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É CHECK_LIMIT
                await asyncio.sleep(1.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫
                session = user_session._sessions.get(REAL_USER_ID)
                current_count = session.message_count if session else 0
                print(f"  –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {current_count}")
                
                # –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∞–Ω–∞–ª–∏–∑
                if i == messages_to_send - 1:
                    print("  üéØ –¢–†–ò–ì–ì–ï–†! –î–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏")
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ (fire-and-forget)
                    await asyncio.sleep(3.0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
                    session = user_session._sessions.get(REAL_USER_ID)
                    final_count = session.message_count if session else 0
                    
                    if final_count == 0:
                        print(f"  ‚úì –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω: {current_count} ‚Üí {final_count}")
                    else:
                        print(f"  ‚úó –°—á–µ—Ç—á–∏–∫ –ù–ï —Å–±—Ä–æ—à–µ–Ω: {final_count}")
            
            # ========== 5. –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========
            print("\n5. –ê–ù–ê–õ–ò–ó –ü–û–¢–û–ö–ê –°–û–û–ë–©–ï–ù–ò–ô")
            print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ—Ç–æ–∫–µ: {len(all_messages)}")
            
            # –ò—â–µ–º UPDATE_PARTNER_MODEL
            update_messages = [m for m in all_messages if m['type'] == MESSAGE_TYPES.get('UPDATE_PARTNER_MODEL')]
            
            if update_messages:
                print(f"\n‚úì UPDATE_PARTNER_MODEL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ({len(update_messages)} —Ä–∞–∑)")
                
                for idx, msg in enumerate(update_messages):
                    payload = msg['payload']
                    print(f"\n  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{idx+1}:")
                    print(f"    - user_id: {payload.get('user_id')}")
                    print(f"    - recommended_mode: {payload.get('recommended_mode')}")
                    print(f"    - mode_confidence: {payload.get('mode_confidence')}")
                    
                    style = payload.get('style_vector', {})
                    print("    - style_vector:")
                    print(f"      playfulness: {style.get('playfulness', 0):.3f}")
                    print(f"      seriousness: {style.get('seriousness', 0):.3f}")
                    print(f"      emotionality: {style.get('emotionality', 0):.3f}")
                    print(f"      creativity: {style.get('creativity', 0):.3f}")
                    
                    traits = payload.get('detected_traits', [])
                    print(f"    - detected_traits: {len(traits)} —á–µ—Ä—Ç")
                    for trait in traits[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                        print(f"      ‚Ä¢ {trait['trait_name']}: {trait['strength']:.2f}")
                    
                    metadata = payload.get('analysis_metadata', {})
                    print(f"    - messages_analyzed: {metadata.get('messages_analyzed')}")
                    print(f"    - version: {metadata.get('version')}")
            else:
                print("\n‚úó UPDATE_PARTNER_MODEL –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                print("  –ü—Ä–æ–±–ª–µ–º–∞: PersonalityAnalysisMixin –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            
            # ========== 6. –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í ==========
            print("\n6. –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í –ê–ù–ê–õ–ò–ó–ê")
            
            pool = db_connection.get_pool()
            
            # –¢–µ—Å—Ç StyleAnalyzer
            print("\n6.1 StyleAnalyzer:")
            style_analyzer = StyleAnalyzer(pool)
            style_result = await style_analyzer.analyze_user_style(
                REAL_USER_ID, 
                limit=PERSONALITY_ANALYSIS_MESSAGE_LIMIT
            )
            print(f"  ‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {style_result['messages_analyzed']}")
            print(f"  ‚úì Confidence: {style_result['confidence']:.3f}")
            print(f"  ‚úì Style vector: {style_result['style_vector']}")
            
            # –¢–µ—Å—Ç TraitDetector
            print("\n6.2 TraitDetector:")
            trait_detector = TraitDetector(pool)
            detected_traits = await trait_detector.detect_traits(
                REAL_USER_ID,
                limit=PERSONALITY_ANALYSIS_MESSAGE_LIMIT
            )
            print(f"  ‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —á–µ—Ä—Ç: {len(detected_traits)}")
            if detected_traits:
                for trait in detected_traits[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                    print(f"    ‚Ä¢ {trait.trait_name}: {trait.manifestation_strength:.3f} ({trait.mode})")
            
            # –¢–µ—Å—Ç PartnerPersonaBuilder
            print("\n6.3 PartnerPersonaBuilder:")
            persona_builder = PartnerPersonaBuilder(pool)
            new_persona = await persona_builder.build_or_update_persona(
                REAL_USER_ID,
                style_result
            )
            print("  ‚úì –ü–µ—Ä—Å–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞:")
            print(f"    - mode: {new_persona.recommended_mode}")
            print(f"    - confidence: {new_persona.mode_confidence:.3f}")
            print(f"    - version: {new_persona.version}")
            
            # ========== 7. –ü–†–û–í–ï–†–ö–ê –ë–î ==========
            print("\n7. –ü–†–û–í–ï–†–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ë–î")
            
            # –ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞
            new_persona_db = await pool.fetchrow(
                """
                SELECT persona_id, style_vector, recommended_mode, mode_confidence, version, messages_analyzed
                FROM partner_personas 
                WHERE user_id = $1 AND is_active = true
                """,
                REAL_USER_ID
            )
            
            if new_persona_db:
                print("\n‚úì –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞ –≤ –ë–î:")
                print(f"  - version: {new_persona_db['version']}")
                print(f"  - mode: {new_persona_db['recommended_mode']}")
                print(f"  - confidence: {new_persona_db['mode_confidence']}")
                print(f"  - messages_analyzed: {new_persona_db['messages_analyzed']}")
                
                if old_persona:
                    if new_persona_db['version'] > old_persona['version']:
                        print(f"  ‚úì –í–µ—Ä—Å–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞: {old_persona['version']} ‚Üí {new_persona_db['version']}")
                    else:
                        print(f"  ‚úó –í–µ—Ä—Å–∏—è –ù–ï –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {new_persona_db['version']}")
            else:
                print("\n‚úó –ü–µ—Ä—Å–æ–Ω–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä—Ç
            saved_traits = await pool.fetch(
                """
                SELECT trait_name, manifestation_strength, mode, confidence
                FROM personality_traits_manifestations
                WHERE user_id = $1
                ORDER BY detected_at DESC
                LIMIT 10
                """,
                REAL_USER_ID
            )
            
            if saved_traits:
                print(f"\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–µ—Ä—Ç –≤ –ë–î: {len(saved_traits)}")
                for trait in saved_traits[:3]:
                    print(f"  ‚Ä¢ {trait['trait_name']}: {trait['manifestation_strength']:.3f}")
            else:
                print("\n‚ö†Ô∏è –ß–µ—Ä—Ç—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)")
            
            # ========== 8. –ü–†–û–í–ï–†–ö–ê REDIS ==========
            print("\n8. –ü–†–û–í–ï–†–ö–ê REDIS –ö–≠–®–ê")
            
            if redis_client:
                cache_key = f"partner_persona:{REAL_USER_ID}"
                cached = await redis_client.get(cache_key)
                
                if cached:
                    data = json.loads(cached)
                    print("‚úì –ü–µ—Ä—Å–æ–Ω–∞ –≤ –∫—ç—à–µ:")
                    print(f"  - mode: {data.get('recommended_mode')}")
                    print(f"  - confidence: {data.get('mode_confidence')}")
                    print(f"  - version: {data.get('version')}")
                else:
                    print("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞ –ù–ï –≤ –∫—ç—à–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ UPDATE_PARTNER_MODEL)")
            
            # ========== 9. –ú–ï–¢–†–ò–ö–ò ==========
            print("\n9. –ú–ï–¢–†–ò–ö–ò –ê–ö–¢–û–†–û–í")
            
            print("\nTalkModelActor:")
            talk_metrics = talk_model._metrics
            print(f"  - UPDATE_PARTNER_MODEL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {talk_metrics.get('personas_updated', 0) + talk_metrics.get('personas_unchanged', 0)}")
            print(f"  - –ü–µ—Ä—Å–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {talk_metrics.get('personas_updated', 0)}")
            print(f"  - –ü–µ—Ä—Å–æ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {talk_metrics.get('personas_unchanged', 0)}")
            print(f"  - –û—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {talk_metrics.get('update_errors', 0)}")
            
            # ========== 10. –†–ï–ó–£–õ–¨–¢–ê–¢–´ ==========
            print(f"\n{'='*80}")
            print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
            print(f"{'='*80}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
            checks = {
                "–°—á–µ—Ç—á–∏–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è": session and session.message_count != initial_count or final_count == 0,
                "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ 10-–º —Å–æ–æ–±—â–µ–Ω–∏–∏": len(update_messages) > 0,
                "StyleAnalyzer —Ä–∞–±–æ—Ç–∞–µ—Ç": style_result['messages_analyzed'] > 0,
                "TraitDetector —Ä–∞–±–æ—Ç–∞–µ—Ç": len(detected_traits) >= 0,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
                "PartnerPersonaBuilder —Ä–∞–±–æ—Ç–∞–µ—Ç": new_persona is not None,
                "UPDATE_PARTNER_MODEL –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è": len(update_messages) > 0,
                "–ü–µ—Ä—Å–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î": new_persona_db is not None,
                "–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞": final_count == 0,
            }
            
            passed = 0
            failed = 0
            
            for check, result in checks.items():
                if result:
                    print(f"‚úì {check}")
                    passed += 1
                else:
                    print(f"‚úó {check}")
                    failed += 1
            
            print(f"\n–ò—Ç–æ–≥–æ: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
            
            if failed > 0:
                print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –í –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:")
                if len(update_messages) == 0:
                    print("  - PersonalityAnalysisMixin –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç")
                    print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏–µ _should_analyze_personality()")
                    print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ asyncio.create_task() –≤ _handle_user_message")
                if final_count != 0:
                    print("  - –°—á–µ—Ç—á–∏–∫ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è")
                    print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ session.message_count = 0 –≤ _run_personality_analysis")
            else:
                print("\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
            
            print(f"\n{'='*80}\n")
            
        finally:
            # –ù–ï –£–î–ê–õ–Ø–ï–ú –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï!
            await system.stop()
            print("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ï —Ç—Ä–æ–Ω—É—Ç—ã")
    
    @pytest.mark.asyncio
    async def test_personality_analysis_edge_cases(self):
        """
        –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏:
        - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        - –û—à–∏–±–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
        - –¢–∞–π–º–∞—É—Ç—ã
        """
        
        if not db_connection._is_connected:
            await db_connection.connect()
            
        print(f"\n{'='*80}")
        print("–¢–ï–°–¢ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í –ê–ù–ê–õ–ò–ó–ê –õ–ò–ß–ù–û–°–¢–ò")
        print(f"{'='*80}")
        
        pool = db_connection.get_pool()
        
        # ========== –¢–ï–°–¢ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π ==========
        print("\n1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –° –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–´–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –°–û–û–ë–©–ï–ù–ò–ô")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        sparse_user = await pool.fetchrow(
            """
            SELECT user_id, COUNT(*) as msg_count
            FROM stm_buffer
            WHERE message_type = 'user'
            GROUP BY user_id
            HAVING COUNT(*) < $1
            ORDER BY COUNT(*) DESC
            LIMIT 1
            """,
            PERSONALITY_ANALYSIS_MIN_MESSAGES
        )
        
        if sparse_user:
            user_id = sparse_user['user_id']
            msg_count = sparse_user['msg_count']
            print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ü—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑
            style_analyzer = StyleAnalyzer(pool)
            result = await style_analyzer.analyze_user_style(user_id)
            
            print("  –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"    - has_sufficient_data: {result['metadata']['has_sufficient_data']}")
            print(f"    - confidence: {result['confidence']}")
            print(f"    - style_vector: –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã = {result['style_vector']['playfulness']}")
            
            if not result['metadata']['has_sufficient_data']:
                print("  ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            else:
                print("  ‚úó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("  ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # ========== –¢–ï–°–¢ 2: –ê–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º ==========
        print("\n2. –ü–†–û–í–ï–†–ö–ê –¢–ê–ô–ú–ê–£–¢–û–í")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        REAL_USER_ID = "502312936"
        
        from config.settings import PERSONALITY_ANALYSIS_TIMEOUT
        print(f"  –¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞: {PERSONALITY_ANALYSIS_TIMEOUT} —Å–µ–∫—É–Ω–¥")
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
        style_analyzer = StyleAnalyzer(pool)
        start_time = time.time()
        
        try:
            result = await asyncio.wait_for(
                style_analyzer.analyze_user_style(REAL_USER_ID, limit=100),
                timeout=PERSONALITY_ANALYSIS_TIMEOUT
            )
            elapsed = time.time() - start_time
            print(f"  ‚úì –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.3f} —Å–µ–∫—É–Ω–¥")
        except asyncio.TimeoutError:
            elapsed = time.time() - start_time
            print(f"  ‚úó –¢–∞–π–º–∞—É—Ç! –ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.3f} —Å–µ–∫—É–Ω–¥")
        
        # ========== –¢–ï–°–¢ 3: –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω ==========
        print("\n3. –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø –ü–ï–†–°–û–ù")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
        versions = await pool.fetch(
            """
            SELECT version, recommended_mode, mode_confidence, created_at, is_active
            FROM partner_personas
            WHERE user_id = $1
            ORDER BY version DESC
            LIMIT 5
            """,
            REAL_USER_ID
        )
        
        if versions:
            print(f"  –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {REAL_USER_ID}:")
            for v in versions:
                active = "–ê–ö–¢–ò–í–ù–ê" if v['is_active'] else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                print(f"    v{v['version']}: {v['recommended_mode']} ({v['mode_confidence']:.2f}) - {active}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è
            active_count = sum(1 for v in versions if v['is_active'])
            if active_count == 1:
                print("  ‚úì –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è")
            elif active_count == 0:
                print("  ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
            else:
                print(f"  ‚úó –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π: {active_count}")
        else:
            print("  ‚ö†Ô∏è –ù–µ—Ç –≤–µ—Ä—Å–∏–π –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # ========== –¢–ï–°–¢ 4: –î–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä—Ç ==========
        print("\n4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–¢–ï–ö–¶–ò–ò –ß–ï–†–¢")
        
        trait_stats = await pool.fetch(
            """
            SELECT trait_name, COUNT(*) as count, AVG(manifestation_strength) as avg_strength
            FROM personality_traits_manifestations
            WHERE user_id = $1
            GROUP BY trait_name
            ORDER BY COUNT(*) DESC
            """,
            REAL_USER_ID
        )
        
        if trait_stats:
            print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {REAL_USER_ID}:")
            for stat in trait_stats:
                print(f"    {stat['trait_name']}: {stat['count']} –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π, —Å—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ {stat['avg_strength']:.3f}")
        else:
            print("  ‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        print(f"\n{'='*80}\n")


# –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    test = TestPersonalityAnalysisIntegration()
    asyncio.run(test.test_full_personality_analysis_cycle())
    asyncio.run(test.test_personality_analysis_edge_cases())