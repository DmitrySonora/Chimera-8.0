"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è EmotionAnalyzer
"""
import pytest
import time
import torch
from models.emotion_analyzer import EmotionAnalyzer, EMOTION_LABELS


class TestEmotionAnalyzer:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —ç–º–æ—Ü–∏–π DeBERTa"""
    
    @pytest.fixture(scope="class")
    def analyzer(self):
        """–°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞—Å—Å–∞"""
        return EmotionAnalyzer()
    
    def test_model_initialization(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
        start_time = time.time()
        analyzer = EmotionAnalyzer()
        load_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
        assert analyzer.model is not None, "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        assert analyzer.tokenizer is not None, "–¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        assert load_time < 30, f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ {load_time:.2f}—Å, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < 30—Å"
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    def test_cuda_fallback(self):
        """–¢–µ—Å—Ç fallback –Ω–∞ CPU –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA"""
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å CUDA
        analyzer = EmotionAnalyzer(device="cuda")
        
        # –ï—Å–ª–∏ CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å fallback –Ω–∞ CPU
        if not torch.cuda.is_available():
            assert analyzer.device == "cpu", "–ù–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª fallback –Ω–∞ CPU"
            print("‚úÖ Fallback –Ω–∞ CPU —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            assert analyzer.device == "cuda", "CUDA –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
            print("‚úÖ CUDA –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_reference_phrases(self, analyzer):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        test_cases = [
            ("–û–±–æ–∂–∞—é –≤–∞—à—É –∫–æ—Ñ–µ–π–Ω—é!", ['admiration', 'love']),
            ("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ", ['disgust', 'disapproval']),
            ("–ù–µ –ø–æ–Ω–∏–º–∞—é, –æ–±—ä—è—Å–Ω–∏ –µ—â–µ —Ä–∞–∑", ['confusion']),
            ("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –ø–æ–º–æ—â—å!", ['gratitude']),
            ("–ë–æ—é—Å—å, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å", ['fear', 'nervousness']),
            ("–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", ['curiosity', 'excitement']),
            ("–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è", ['sadness']),
            ("–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π", ['admiration', 'pride', 'approval']),
            ("–≠—Ç–æ –±—ã–ª–æ —Ç–∞–∫ —Å–º–µ—à–Ω–æ!", ['amusement', 'joy']),
            ("–Ø –≤ –ø–æ–ª–Ω–æ–º –≤–æ—Å—Ç–æ—Ä–≥–µ!", ['excitement', 'joy']),
        ]
        
        success_count = 0
        for text, expected_emotions in test_cases:
            detected = analyzer.analyze_text(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è —ç–º–æ—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
            found = any(emotion in detected for emotion in expected_emotions)
            
            if found:
                success_count += 1
                print(f"‚úÖ '{text}' ‚Üí {detected}")
            else:
                print(f"‚ùå '{text}' ‚Üí {detected}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_emotions}")
        
        # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 70% —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        success_rate = success_count / len(test_cases)
        assert success_rate >= 0.7, f"–£—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_rate*100:.0f}% —ç–º–æ—Ü–∏–π"
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {success_rate*100:.0f}%")
    
    def test_emotion_vector(self, analyzer):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞"""
        text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å, –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!"
        vector = analyzer.get_emotion_vector(text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        assert isinstance(vector, dict), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–ª–æ–≤–∞—Ä—å"
        assert len(vector) == 28, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 28 —ç–º–æ—Ü–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(vector)}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π
        for emotion in EMOTION_LABELS:
            assert emotion in vector, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–º–æ—Ü–∏—è: {emotion}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        for emotion, value in vector.items():
            assert 0 <= value <= 1, f"–ó–Ω–∞—á–µ–Ω–∏–µ {emotion}={value} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0,1]"
            assert isinstance(value, float), f"–ó–Ω–∞—á–µ–Ω–∏–µ {emotion} –Ω–µ float"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        assert all(len(str(v).split('.')[-1]) <= 3 for v in vector.values()), \
            "–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω—ã –¥–æ 3 –∑–Ω–∞–∫–æ–≤"
        
        print(f"‚úÖ –í–µ–∫—Ç–æ—Ä —ç–º–æ—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, gratitude={vector['gratitude']}")
    
    def test_long_text_handling(self, analyzer):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 128 —Ç–æ–∫–µ–Ω–æ–≤
        long_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. " * 50
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        emotions = analyzer.analyze_text(long_text)
        assert isinstance(emotions, list), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–ø–∏—Å–æ–∫"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –≤–µ–∫—Ç–æ—Ä
        vector = analyzer.get_emotion_vector(long_text)
        assert len(vector) == 28, "–í–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —ç–º–æ—Ü–∏–∏"
        
        print("‚úÖ –î–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_performance_single_text(self, analyzer):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        text = "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ –≤—Å—Ç—Ä–µ—á–µ —Å –≤–∞–º–∏!"
        
        # –ü—Ä–æ–≥—Ä–µ–≤
        _ = analyzer.analyze_text(text)
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ
        start_time = time.time()
        _ = analyzer.analyze_text(text)
        elapsed = (time.time() - start_time) * 1000
        
        assert elapsed < 200, f"–ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è–ª {elapsed:.0f}–º—Å, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < 200–º—Å"
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {elapsed:.0f}–º—Å")
    
    def test_performance_batch(self, analyzer):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∞—Ç—á–∞ —Ç–µ–∫—Å—Ç–æ–≤"""
        texts = [
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
            "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ",
            "–≠—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ!",
            "–Ø –≤ —è—Ä–æ—Å—Ç–∏!",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å",
            "–ù–µ –ø–æ–Ω–∏–º–∞—é",
            "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            "–ë–æ—é—Å—å –æ–ø–æ–∑–¥–∞—Ç—å",
            "–û–±–æ–∂–∞—é —ç—Ç–æ –º–µ—Å—Ç–æ",
            "–ö–∞–∫–∞—è –≥–∞–¥–æ—Å—Ç—å!",
        ]
        
        start_time = time.time()
        for text in texts:
            _ = analyzer.analyze_text(text)
        elapsed = (time.time() - start_time) * 1000
        
        assert elapsed < 1000, f"–ë–∞—Ç—á –∑–∞–Ω—è–ª {elapsed:.0f}–º—Å, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < 1000–º—Å"
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∞—Ç—á–∞ –∏–∑ {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤: {elapsed:.0f}–º—Å")
    
    def test_threshold_application(self, analyzer):
        """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        neutral_text = "–°–µ–≥–æ–¥–Ω—è –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å"
        emotions = analyzer.analyze_text(neutral_text)
        
        # grief –∏–º–µ–µ—Ç –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ (0.02), –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        assert 'grief' not in emotions, "grief –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥
        mild_admiration = "–ù–µ–ø–ª–æ—Ö–æ —Å–¥–µ–ª–∞–Ω–æ"
        emotions = analyzer.analyze_text(mild_admiration)
        
        # admiration –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ (0.551), –º–æ–∂–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ —Å–ª–∞–±–æ–π –ø–æ—Ö–≤–∞–ª–µ
        print(f"–≠–º–æ—Ü–∏–∏ –¥–ª—è '{mild_admiration}': {emotions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        vector = analyzer.get_emotion_vector(mild_admiration)
        print(f"admiration –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {vector['admiration']}")
        print(f"approval –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {vector['approval']}")
        
        print("‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_russian_emotion_names(self, analyzer):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —ç–º–æ—Ü–∏–π"""
        text = "–°–ø–∞—Å–∏–±–æ –≤–∞–º –æ–≥—Ä–æ–º–Ω–æ–µ!"
        russian_emotions = analyzer.get_russian_emotions(text)
        
        assert isinstance(russian_emotions, list), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–ø–∏—Å–æ–∫"
        assert all(isinstance(e, str) for e in russian_emotions), "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if 'gratitude' in analyzer.analyze_text(text):
            assert '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å' in russian_emotions, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è gratitude"
        
        print(f"‚úÖ –†—É—Å—Å–∫–∏–µ —ç–º–æ—Ü–∏–∏: {russian_emotions}")
    
    def test_error_handling(self, analyzer):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç - –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ neutral
        empty_result = analyzer.analyze_text("")
        assert isinstance(empty_result, list), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–ø–∏—Å–æ–∫"
        # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —á–∞—Å—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ neutral, —á—Ç–æ –ª–æ–≥–∏—á–Ω–æ
        if empty_result:
            assert 'neutral' in empty_result, f"–û–∂–∏–¥–∞–ª—Å—è 'neutral' –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ: {empty_result}"
        
        # None –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
        try:
            _ = analyzer.analyze_text(None)
        except Exception:
            # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
            pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        short_result = analyzer.analyze_text("–∞")
        assert isinstance(short_result, list), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v", "-s"])