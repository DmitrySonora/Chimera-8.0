#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ AuthActor.
–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∞—Ç–∞–∫—É –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π.
"""
import asyncio
import sys
from pathlib import Path
from datetime import datetime, timezone
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.connection import db_connection
from actors.actor_system import ActorSystem
from actors.messages import ActorMessage, MESSAGE_TYPES
from actors.auth import AuthActor
from actors.base_actor import BaseActor
from config.settings_auth import AUTH_MAX_ATTEMPTS
from config.logging import setup_logging
import hashlib


class TestCollectorActor(BaseActor):
    """–ê–∫—Ç–æ—Ä –¥–ª—è —Å–±–æ—Ä–∞ AUTH_RESPONSE —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        super().__init__("test_collector", "TestCollector")
        self.responses = []
        
    async def initialize(self) -> None:
        self.logger.info("TestCollectorActor initialized")
        
    async def shutdown(self) -> None:
        self.logger.info(f"TestCollectorActor shutdown, collected {len(self.responses)} responses")
        
    async def handle_message(self, message: ActorMessage):
        if message.message_type == MESSAGE_TYPES['AUTH_RESPONSE']:
            self.responses.append(message.payload)
            self.logger.info(f"Collected AUTH_RESPONSE: success={message.payload.get('success')}, error={message.payload.get('error')}")
        return None


async def wait_for_response(collector: TestCollectorActor, expected_count: int, timeout: float = 3.0):
    """–ñ–¥–µ—Ç –ø–æ–∫–∞ collector –ø–æ–ª—É—á–∏—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤"""
    start_time = asyncio.get_event_loop().time()
    while len(collector.responses) < expected_count:
        if asyncio.get_event_loop().time() - start_time > timeout:
            raise TimeoutError(f"Timeout waiting for {expected_count} responses, got {len(collector.responses)}")
        await asyncio.sleep(0.1)


@pytest.mark.skip(reason="AuthActor –∫—ç—à–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
async def test_auth_protection(db_session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç anti-bruteforce –∑–∞—â–∏—Ç—É"""
    setup_logging()
    
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Anti-bruteforce –∑–∞—â–∏—Ç—ã")
    print("=" * 50)
    
    pool = db_connection.get_pool()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("2. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    test_user_id = "test_bruteforce_999"
    test_password = "TEST_PASSWORD_999"
    test_password_hash = hashlib.sha256(test_password.encode()).hexdigest()
    
    await pool.execute("DELETE FROM auth_attempts WHERE user_id = $1", test_user_id)
    await pool.execute("DELETE FROM blocked_users WHERE user_id = $1", test_user_id)
    await pool.execute("DELETE FROM authorized_users WHERE user_id = $1", test_user_id)
    await pool.execute("DELETE FROM passwords WHERE password = $1", test_password)
    
    # –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Event Store
    await pool.execute("DELETE FROM events WHERE stream_id LIKE $1", f"%{test_user_id}%")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    print("3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
    await pool.execute(
        """
        INSERT INTO passwords (password, password_hash, duration_days, description, is_active, created_by, created_at)
        VALUES ($1, $2, 30, 'Test password for bruteforce', TRUE, 'test_script', CURRENT_TIMESTAMP)
        """,
        test_password, test_password_hash
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    print("4. –ó–∞–ø—É—Å–∫ Actor System —Å Event Store...")
    system = ActorSystem("test-auth")
    
    # –°–æ–∑–¥–∞–µ–º Event Store
    await system.create_and_set_event_store()
    
    # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–æ—Ä—ã
    auth_actor = AuthActor()
    collector = TestCollectorActor()
    
    await system.register_actor(auth_actor)
    await system.register_actor(collector)
    await system.start()
    
    print(f"\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {AUTH_MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏...")
    print(f"   (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ {AUTH_MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫)")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
    collector.responses = []
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
    for i in range(AUTH_MAX_ATTEMPTS):
        print(f"\n   –ü–æ–ø—ã—Ç–∫–∞ #{i+1}/{AUTH_MAX_ATTEMPTS}:")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AUTH_REQUEST —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        wrong_password = f"WRONG_PASSWORD_{i}"
        auth_request = ActorMessage.create(
            sender_id="test_collector",  # –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–µ–º collector –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            message_type=MESSAGE_TYPES['AUTH_REQUEST'],
            payload={
                'user_id': test_user_id,
                'password': wrong_password
            }
        )
        
        await system.send_message("auth", auth_request)
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        await wait_for_response(collector, i + 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        last_response = collector.responses[-1]
        assert last_response['success'] is False, "–û–∂–∏–¥–∞–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç"
        assert last_response['error'] == 'invalid_password', f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 'invalid_password', –ø–æ–ª—É—á–µ–Ω–∞ '{last_response.get('error')}'"
        
        print(f"   ‚úì –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: error='{last_response['error']}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ë–î
    print(f"\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ {AUTH_MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫...")
    blocked_row = await pool.fetchrow(
        "SELECT * FROM blocked_users WHERE user_id = $1",
        test_user_id
    )
    
    if blocked_row and blocked_row['blocked_until'] > datetime.now(timezone.utc):
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ: {blocked_row['blocked_until']}")
        print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {blocked_row['attempt_count']}")
    else:
        print("   ‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        await system.stop()
        return
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É - –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 'blocked'
    print(f"\n7. –ü–æ–ø—ã—Ç–∫–∞ #{AUTH_MAX_ATTEMPTS + 1} (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 'blocked')...")
    
    auth_request = ActorMessage.create(
        sender_id="test_collector",
        message_type=MESSAGE_TYPES['AUTH_REQUEST'],
        payload={
            'user_id': test_user_id,
            'password': 'ANY_PASSWORD'
        }
    )
    
    await system.send_message("auth", auth_request)
    await wait_for_response(collector, AUTH_MAX_ATTEMPTS + 1)
    
    last_response = collector.responses[-1]
    assert last_response['success'] is False
    assert last_response['error'] == 'blocked', f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 'blocked', –ø–æ–ª—É—á–µ–Ω–∞ '{last_response.get('error')}'"
    assert 'blocked_until' in last_response, "–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ blocked_until"
    
    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: error='blocked', blocked_until='{last_response['blocked_until']}'")
    
    # –ü—Ä–æ–±—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
    print("\n8. –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –ø–∞—Ä–æ–ª–µ–º (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)...")
    
    correct_auth = ActorMessage.create(
        sender_id="test_collector",
        message_type=MESSAGE_TYPES['AUTH_REQUEST'],
        payload={
            'user_id': test_user_id,
            'password': test_password
        }
    )
    
    await system.send_message("auth", correct_auth)
    await wait_for_response(collector, AUTH_MAX_ATTEMPTS + 2)
    
    last_response = collector.responses[-1]
    assert last_response['success'] is False
    assert last_response['error'] == 'blocked', "–î–∞–∂–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    print("\n9. –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    await pool.execute(
        "DELETE FROM blocked_users WHERE user_id = $1",
        test_user_id
    )
    
    # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    await asyncio.sleep(2.0)
    
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    print("10. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –ø–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
    
    await system.send_message("auth", correct_auth)
    await wait_for_response(collector, AUTH_MAX_ATTEMPTS + 3)
    
    last_response = collector.responses[-1]
    assert last_response['success'] is True, "–ü–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
    
    print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    print(f"   ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {last_response['expires_at']}")
    print(f"   ‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {last_response['days_remaining']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    print("\n11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_attempts
    attempts_count = await pool.fetchval(
        "SELECT COUNT(*) FROM auth_attempts WHERE user_id = $1",
        test_user_id
    )
    
    failed_count = await pool.fetchval(
        "SELECT COUNT(*) FROM auth_attempts WHERE user_id = $1 AND success = FALSE",
        test_user_id
    )
    
    success_count = await pool.fetchval(
        "SELECT COUNT(*) FROM auth_attempts WHERE user_id = $1 AND success = TRUE",
        test_user_id
    )
    
    print(f"   –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ auth_attempts: {attempts_count}")
    print(f"   - –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_count}")
    print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º authorized_users
    auth_user = await pool.fetchrow(
        "SELECT * FROM authorized_users WHERE user_id = $1",
        test_user_id
    )
    
    if auth_user:
        print("   ‚úÖ –ó–∞–ø–∏—Å—å –≤ authorized_users —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("   ‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø–∏—Å—å –≤ authorized_users –ù–ï —Å–æ–∑–¥–∞–Ω–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ Event Store
    events_count = await pool.fetchval(
        "SELECT COUNT(*) FROM events WHERE stream_id = $1",
        f"auth_{test_user_id}"
    )
    
    print(f"   –°–æ–±—ã—Ç–∏—è –≤ Event Store: {events_count}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å, —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    print("\n12. –¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø–∞—Ä–æ–ª—å...")
    
    other_user_id = "test_other_user_999"
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.execute("DELETE FROM auth_attempts WHERE user_id = $1", other_user_id)
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–Ω—è—Ç—ã–π –ø–∞—Ä–æ–ª—å
    stolen_auth = ActorMessage.create(
        sender_id="test_collector",
        message_type=MESSAGE_TYPES['AUTH_REQUEST'],
        payload={
            'user_id': other_user_id,
            'password': test_password  # –ü–∞—Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω test_user_id
        }
    )
    
    await system.send_message("auth", stolen_auth)
    await wait_for_response(collector, AUTH_MAX_ATTEMPTS + 4)
    
    last_response = collector.responses[-1]
    assert last_response['success'] is False
    assert last_response['error'] == 'already_used', f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 'already_used', –ø–æ–ª—É—á–µ–Ω–∞ '{last_response.get('error')}'"
    
    print("   ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø–∞—Ä–æ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å error='already_used'")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    print("\n13. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    await system.stop()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("14. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    await pool.execute("DELETE FROM auth_attempts WHERE user_id IN ($1, $2)", test_user_id, other_user_id)
    await pool.execute("DELETE FROM blocked_users WHERE user_id = $1", test_user_id)
    await pool.execute("DELETE FROM authorized_users WHERE user_id = $1", test_user_id)
    await pool.execute("DELETE FROM passwords WHERE password = $1", test_password)
    await pool.execute("DELETE FROM events WHERE stream_id LIKE $1", f"%{test_user_id}%")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
    print(f"- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ {AUTH_MAX_ATTEMPTS} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
    print("- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏")
    print("- –ü–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
    print("- –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø–∞—Ä–æ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'already_used'")
    print("- –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î –∏ Event Store")


if __name__ == "__main__":
    try:
        asyncio.run(test_auth_protection())
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {str(e)}")
        sys.exit(1)