"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è StyleAnalyzer —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î.
–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥: pytest tests/test_style_analyzer.py -v -s
"""
import asyncio
import pytest
from database.connection import DatabaseConnection
from services.style_analyzer import StyleAnalyzer


class TestStyleAnalyzer:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç StyleAnalyzer —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
    
    @pytest.mark.asyncio
    async def test_analyze_real_user_style(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            analyzer = StyleAnalyzer(db)
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await analyzer.analyze_user_style(
                user_id="502312936",
                limit=50
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            assert "style_vector" in result
            assert all(k in result["style_vector"] for k in ["playfulness", "seriousness", "emotionality", "creativity"])
            assert all(0 <= v <= 1 for v in result["style_vector"].values())
            assert 0 <= result["confidence"] <= 1
            assert result["messages_analyzed"] >= 0
            assert "metadata" in result
            assert "analysis_time_ms" in result["metadata"]
            assert "has_sufficient_data" in result["metadata"]
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"\n{'='*60}")
            print("Style analysis for user 502312936:")
            print(f"{'='*60}")
            print(f"Messages analyzed: {result['messages_analyzed']}")
            print(f"Confidence: {result['confidence']:.3f}")
            print("\nStyle Vector:")
            for component, value in result['style_vector'].items():
                bar = '‚ñà' * int(value * 20) + '‚ñë' * (20 - int(value * 20))
                print(f"  {component:12s}: [{bar}] {value:.3f}")
            print(f"\nAnalysis time: {result['metadata']['analysis_time_ms']}ms")
            print(f"Sufficient data: {result['metadata']['has_sufficient_data']}")
            print(f"{'='*60}\n")
            
        finally:
            await db.disconnect()

    @pytest.mark.asyncio
    async def test_insufficient_data(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            analyzer = StyleAnalyzer(db)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await analyzer.analyze_user_style(
                user_id="nonexistent_user_123456",
                limit=50
            )
            
            # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
            assert result["style_vector"]["playfulness"] == 0.5
            assert result["style_vector"]["seriousness"] == 0.5
            assert result["style_vector"]["emotionality"] == 0.5
            assert result["style_vector"]["creativity"] == 0.5
            assert result["confidence"] == 0.1
            assert result["messages_analyzed"] == 0
            assert result["metadata"]["has_sufficient_data"] is False
            
            print("\nTest insufficient data: PASSED")
            print(f"Neutral vector returned: {result['style_vector']}")
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            analyzer = StyleAnalyzer(db)
            
            # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤
            for limit in [10, 25, 50]:
                result = await analyzer.analyze_user_style(
                    user_id="502312936",
                    limit=limit
                )
                
                analysis_time = result['metadata']['analysis_time_ms']
                print(f"\nPerformance test - {limit} messages: {analysis_time}ms")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–ª–∞–¥—ã–≤–∞–µ–º—Å—è –≤ –ª–∏–º–∏—Ç
                if limit <= 50:
                    assert analysis_time < 200, f"Analysis too slow: {analysis_time}ms > 200ms"
                    
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_playful_style_detection(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–∏–≤–æ–≥–æ —Å—Ç–∏–ª—è."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–≥—Ä–∏–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            test_user_id = "test_playful_user_123"
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            playful_messages = [
                "–ê—Ö–∞—Ö–∞—Ö, —ç—Ç–æ –∂–µ –ø—Ä–æ—Å—Ç–æ –±–æ–º–±–∞! üòÇüòÇüòÇ",
                "–ö—Ä—É—Ç—è–∫! –í–∞—â–µ –æ–≥–æ–Ω—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª—Å—è )))) üî•",
                "–õ–æ–ª, –Ω—É —Ç—ã –¥–∞–µ—à—å, –±—Ä–æ! –†–µ—Å–ø–µ–∫—Ç –∏ —É–≤–∞–∂—É—Ö–∞ üòé",
                "–•–∏—Ö–∏, –ø—Ä–∏–∫–æ–ª—å–Ω–æ –∂–µ! –û–±–æ–∂–∞—é —Ç–∞–∫–æ–µ ‚ù§Ô∏è",
                "–í–∞—É!!! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å –∫–∞–∫–æ–π-—Ç–æ üöÄ –∫–∞–π—Ñ–æ–≤–æ!",
                "–û—Ä—É —Å —ç—Ç–æ–≥–æ))) —Ö–∞—Ö–∞—Ö–∞, –Ω—É —Ç—ã –∂–∂–µ—à—å üòÜ",
                "–ô–æ—É, –±—Ä–∞—Ç–∞–Ω, —ç—Ç–æ —Ç–æ–ø—á–∏–∫! –ò–º–±–∞ –ø—Ä–æ—Å—Ç–æ üëç"
            ]
            
            for i, msg in enumerate(playful_messages):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, msg, i)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å
            analyzer = StyleAnalyzer(db)
            result = await analyzer.analyze_user_style(test_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∏–≤–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è
            print(f"\n{'='*60}")
            print("Test PLAYFUL style detection:")
            print(f"Playfulness: {result['style_vector']['playfulness']:.3f}")
            print(f"Seriousness: {result['style_vector']['seriousness']:.3f}")
            print(f"Messages: {result['messages_analyzed']}")
            print(f"{'='*60}")
            
            assert result['style_vector']['playfulness'] > 0.6, \
                f"Playfulness too low for playful messages: {result['style_vector']['playfulness']}"
            assert result['style_vector']['seriousness'] < 0.4, \
                f"Seriousness too high for playful messages: {result['style_vector']['seriousness']}"
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_serious_style_detection(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ —Å—Ç–∏–ª—è."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            test_user_id = "test_serious_user_456"
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            serious_messages = [
                "–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                "–í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º, –≤–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞.",
                "–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏?",
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ, —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–π –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∏.",
                "–ò—Å—Ö–æ–¥—è –∏–∑ –≤—ã—à–µ–∏–∑–ª–æ–∂–µ–Ω–Ω–æ–≥–æ, —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é."
            ]
            
            for i, msg in enumerate(serious_messages):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, msg, i)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analyzer = StyleAnalyzer(db)
            result = await analyzer.analyze_user_style(test_user_id)
            
            print(f"\n{'='*60}")
            print("Test SERIOUS style detection:")
            print(f"Seriousness: {result['style_vector']['seriousness']:.3f}")
            print(f"Playfulness: {result['style_vector']['playfulness']:.3f}")
            print(f"Messages: {result['messages_analyzed']}")
            print(f"{'='*60}")
            
            assert result['style_vector']['seriousness'] > 0.55, \
                f"Seriousness too low: {result['style_vector']['seriousness']}"
            assert result['style_vector']['playfulness'] < 0.3, \
                f"Playfulness too high: {result['style_vector']['playfulness']}"
            
            # –û—á–∏—â–∞–µ–º
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_new_vocabulary_categories(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ª–æ–≤–∞—Ä—è (diminutives, emotional_words –∏ —Ç.–¥.)."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º diminutives –æ—Ç–¥–µ–ª—å–Ω–æ
            test_user_id = "test_diminutives"
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
            diminutive_messages = [
                "–î—Ä—É–∂–æ—á–µ–∫, —Å–æ–ª–Ω—ã—à–∫–æ, —Ç—ã —Ç–∞–∫–æ–π –º–∏–ª–∞—à–∫–∞!",
                "–ö–æ—Ç–∏–∫ –º–æ–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–∏–π, —É–º–Ω–∏—á–∫–∞!",
                "–ö—Ä–æ—à–∫–∞, –∑–∞–π–∫–∞, —Å–ª–∞–≤–Ω–µ–Ω—å–∫–∏–π —Ç–∞–∫–æ–π!",
                "–î–æ–±—Ä–µ–Ω—å–∫–∏–π –º–æ–π, –ª–∞—Å–∫–æ–≤—ã–π, –Ω–µ–∂–Ω–µ–Ω—å–∫–∏–π!",
                "–ö—Ä–∞—Å–æ—Ç—É–ª–µ—á–∫–∞, —Å–ª–∞–¥–µ–Ω—å–∫–∏–π –º–æ–π!",
                "–¢–µ–ø–ª–µ–Ω—å–∫–∏–π, –º—è–≥–æ–Ω—å–∫–∏–π, —Ö–æ—Ä–æ—à–µ–Ω—å–∫–∏–π!"
            ]
            
            for i, msg in enumerate(diminutive_messages):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, msg, i)
            
            analyzer = StyleAnalyzer(db)
            result = await analyzer.analyze_user_style(test_user_id)
            
            print(f"\n{'='*60}")
            print("Test DIMINUTIVES:")
            print(f"Playfulness: {result['style_vector']['playfulness']:.3f}")
            print("Expected: > 0.3 due to diminutives")
            print(f"{'='*60}")
            
            assert result['style_vector']['playfulness'] > 0.3, \
                f"Diminutives not properly detected: {result['style_vector']['playfulness']}"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º analytical markers –æ—Ç–¥–µ–ª—å–Ω–æ
            test_user_id = "test_analytical"
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
            analytical_messages = [
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.",
                "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É—è, –º—ã —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥—ã.",
                "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏ –∏–∑—É—á–∞—è, —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã.",
                "–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—Å–ª–µ–¥—É—è, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ.",
                "–î–µ–¥—É—Ü–∏—Ä—É—è –∏–∑ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫, –∏–Ω–¥—É—Ü–∏—Ä—É–µ–º –æ–±—â–∏–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏.",
                "–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–æ–±–ª–µ–º—É, –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ."
            ]
            
            for i, msg in enumerate(analytical_messages):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, msg, i)
            
            result = await analyzer.analyze_user_style(test_user_id)
            
            print(f"\n{'='*60}")
            print("Test ANALYTICAL MARKERS:")
            print(f"Seriousness: {result['style_vector']['seriousness']:.3f}")
            print("Expected: > 0.4 due to analytical markers")
            print(f"{'='*60}")
            
            assert result['style_vector']['seriousness'] > 0.4, \
                f"Analytical markers not detected: {result['style_vector']['seriousness']}"
            
            # –û—á–∏—â–∞–µ–º
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", "test_diminutives")
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", "test_analytical")
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_temporal_decay(self):
        """–¢–µ—Å—Ç –≤–ª–∏—è–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ decay –Ω–∞ –∞–Ω–∞–ª–∏–∑."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            test_user_id = "test_decay_user_321"
            
            # –û—á–∏—â–∞–µ–º
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
            # –°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Å–µ—Ä—å–µ–∑–Ω—ã–µ (–±—É–¥—É—Ç –∏–º–µ—Ç—å –º–µ–Ω—å—à–∏–π –≤–µ—Å)
            old_serious = [
                "–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.",
                "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
                "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
            ]
            
            # –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–≥—Ä–∏–≤—ã–µ (–±—É–¥—É—Ç –∏–º–µ—Ç—å –±–æ–ª—å—à–∏–π –≤–µ—Å)
            new_playful = [
                "–ê—Ö–∞—Ö–∞, –ª–æ–ª, —ç—Ç–æ –∂–µ —Å—É–ø–µ—Ä! üòÇ",
                "–ö—Ä—É—Ç–æ, –±—Ä–æ! –ö–∞–π—Ñ –ø—Ä–æ—Å—Ç–æ üî•",
                "–í–∞—É!!! –û–±–æ–∂–∞—é!!! ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è"
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ
            for i, msg in enumerate(old_serious):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW() - INTERVAL '1 hour')
                """, test_user_id, msg, i)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä–∏–≤—ã–µ
            for i, msg in enumerate(new_playful):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, msg, i + 3)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analyzer = StyleAnalyzer(db)
            result = await analyzer.analyze_user_style(test_user_id)
            
            print(f"\n{'='*60}")
            print("Test TEMPORAL DECAY:")
            print(f"Playfulness: {result['style_vector']['playfulness']:.3f} (should be higher)")
            print(f"Seriousness: {result['style_vector']['seriousness']:.3f} (should be lower)")
            print("Recent playful messages should outweigh old serious ones")
            print(f"{'='*60}")
            
            # –ò–∑-–∑–∞ decay –∏–≥—Ä–∏–≤–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å
            assert result['style_vector']['playfulness'] > result['style_vector']['seriousness'], \
                f"Temporal decay not working: playfulness {result['style_vector']['playfulness']} <= seriousness {result['style_vector']['seriousness']}"
            
            # –û—á–∏—â–∞–µ–º
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio 
    async def test_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            test_user_id = "test_short_msgs"
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
            short_messages = ["–¥–∞", "–Ω–µ—Ç", "–æ–∫", "—Ö–º", "–∞–≥–∞", "–Ω–µ", ".", "?"]
            for i, msg in enumerate(short_messages):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, msg, i)
            
            analyzer = StyleAnalyzer(db)
            result = await analyzer.analyze_user_style(test_user_id)
            
            print(f"\n{'='*60}")
            print("Test SHORT MESSAGES:")
            print(f"Confidence: {result['confidence']:.3f} (should be low)")
            print(f"Style: {result['style_vector']}")
            print(f"{'='*60}")
            
            # Confidence –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∑–∫–æ–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            assert result['confidence'] < 0.5, f"Confidence too high for short messages: {result['confidence']}"
            
            # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            test_user_id = "test_long_msg"
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", test_user_id)
            
            long_message = """
            –≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º—ã—Å–ª–µ–π –∏ –∏–¥–µ–π.
            –í–æ-–ø–µ—Ä–≤—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö.
            –í–æ-–≤—Ç–æ—Ä—ã—Ö, —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
            –í-—Ç—Ä–µ—Ç—å–∏—Ö, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã.
            –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.
            """
            
            for i in range(5):  # –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ø–∏–π –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, long_message, i)
            
            result = await analyzer.analyze_user_style(test_user_id)
            
            print(f"\n{'='*60}")
            print("Test LONG MESSAGES:")
            print(f"Seriousness: {result['style_vector']['seriousness']:.3f} (should be high)")
            print(f"Creativity: {result['style_vector']['creativity']:.3f} (should be moderate-high)")
            print(f"{'='*60}")
            
            # –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –≤—ã—Å–æ–∫—É—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
            assert result['style_vector']['seriousness'] > 0.6, \
                f"Seriousness too low for long messages: {result['style_vector']['seriousness']}"
            
            # –û—á–∏—â–∞–µ–º
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", "test_short_msgs")
            await db.execute("DELETE FROM stm_buffer WHERE user_id = $1", "test_long_msg")
            
        finally:
            await db.disconnect()
    
    


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    async def run_tests():
        test = TestStyleAnalyzer()
        
        print("Running test_analyze_real_user_style...")
        await test.test_analyze_real_user_style()
        
        print("\nRunning test_insufficient_data...")
        await test.test_insufficient_data()
        
        print("\nRunning test_performance...")
        await test.test_performance()
        
        print("\nAll tests completed!")
    
    asyncio.run(run_tests())