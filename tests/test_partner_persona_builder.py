"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è PartnerPersonaBuilder —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î.
–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥: pytest tests/test_partner_persona_builder.py -v -s
"""
import asyncio
import pytest
from uuid import UUID
from database.connection import DatabaseConnection
from services.style_analyzer import StyleAnalyzer
from services.partner_persona_builder import PartnerPersonaBuilder
from models.personality_models import StyleVector


class TestPartnerPersonaBuilder:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç PartnerPersonaBuilder —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
    
    @pytest.mark.asyncio
    async def test_persona_building_real_user(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 502312936."""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
            await db.execute(
                "DELETE FROM partner_personas WHERE user_id = $1",
                "502312936"
            )
            print("üßπ Cleaned up old personas for user 502312936")
            # 1. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ StyleAnalyzer
            print(f"\n{'='*60}")
            print("STEP 1: Analyzing style for user 502312936")
            print(f"{'='*60}")
            
            analyzer = StyleAnalyzer(db)
            style_result = await analyzer.analyze_user_style(
                user_id="502312936",
                limit=50
            )
            
            print(f"Messages analyzed: {style_result['messages_analyzed']}")
            print(f"Style confidence: {style_result['confidence']:.3f}")
            print("\nStyle Vector:")
            for component, value in style_result['style_vector'].items():
                bar = '‚ñà' * int(value * 20) + '‚ñë' * (20 - int(value * 20))
                print(f"  {component:12s}: [{bar}] {value:.3f}")
            
            # 2. –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –ø–µ—Ä—Å–æ–Ω—É —á–µ—Ä–µ–∑ PartnerPersonaBuilder
            print(f"\n{'='*60}")
            print("STEP 2: Building first persona version")
            print(f"{'='*60}")
            
            builder = PartnerPersonaBuilder(db)
            persona_v1 = await builder.build_or_update_persona(
                user_id="502312936",
                style_result=style_result
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏
            assert persona_v1.user_id == "502312936"
            assert persona_v1.version == 1
            assert persona_v1.is_active
            assert persona_v1.recommended_mode in ["talk", "expert", "creative"]
            assert isinstance(persona_v1.persona_id, UUID)
            assert persona_v1.messages_analyzed == style_result['messages_analyzed']
            
            print("‚úÖ Persona v1 created:")
            print(f"  ID: {persona_v1.persona_id}")
            print(f"  Version: {persona_v1.version}")
            print(f"  Mode: {persona_v1.recommended_mode} (confidence: {persona_v1.mode_confidence:.3f})")
            print(f"  Style confidence: {persona_v1.style_confidence:.3f}")
            print(f"  Messages analyzed: {persona_v1.messages_analyzed}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            print(f"\n{'='*60}")
            print("STEP 3: Testing insignificant changes (should NOT create new version)")
            print(f"{'='*60}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–µ–≥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π style_result (< 20%)
            modified_style = style_result.copy()
            old_vector = style_result['style_vector'].copy()
            modified_style['style_vector'] = {
                'playfulness': min(1.0, old_vector['playfulness'] + 0.1),  # +10%
                'seriousness': max(0.0, old_vector['seriousness'] - 0.1),  # -10%
                'emotionality': old_vector['emotionality'],
                'creativity': old_vector['creativity']
            }
            
            print("Minor changes applied:")
            print(f"  playfulness: {old_vector['playfulness']:.3f} ‚Üí {modified_style['style_vector']['playfulness']:.3f}")
            print(f"  seriousness: {old_vector['seriousness']:.3f} ‚Üí {modified_style['style_vector']['seriousness']:.3f}")
            
            persona_same = await builder.build_or_update_persona(
                user_id="502312936",
                style_result=modified_style
            )
            
            # –î–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ç–∞ –∂–µ –≤–µ—Ä—Å–∏—è
            assert persona_same.version == 1, f"Expected version 1, got {persona_same.version}"
            assert persona_same.persona_id == persona_v1.persona_id
            print("‚úÖ Correctly returned existing version (no new version created)")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –°–û–ó–î–ê–Æ–¢ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            print(f"\n{'='*60}")
            print("STEP 4: Testing significant changes (should CREATE new version)")
            print(f"{'='*60}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π style_result (> 20%)
            significant_style = style_result.copy()
            significant_style['style_vector'] = {
                'playfulness': min(1.0, old_vector['playfulness'] + 0.3),  # +30%
                'seriousness': max(0.0, old_vector['seriousness'] - 0.25),  # -25%
                'emotionality': min(1.0, old_vector['emotionality'] + 0.25),  # +25%
                'creativity': old_vector['creativity']
            }
            significant_style['messages_analyzed'] = 100  # –ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            
            print("Significant changes applied:")
            for component in ['playfulness', 'seriousness', 'emotionality', 'creativity']:
                old_val = old_vector[component]
                new_val = significant_style['style_vector'][component]
                change = new_val - old_val
                print(f"  {component:12s}: {old_val:.3f} ‚Üí {new_val:.3f} (change: {change:+.3f})")
            
            persona_v2 = await builder.build_or_update_persona(
                user_id="502312936",
                style_result=significant_style
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
            assert persona_v2.version == 2, f"Expected version 2, got {persona_v2.version}"
            assert persona_v2.persona_id != persona_v1.persona_id
            assert persona_v2.is_active
            assert persona_v2.messages_analyzed == 100
            
            print("\n‚úÖ Persona v2 created:")
            print(f"  ID: {persona_v2.persona_id}")
            print(f"  Version: {persona_v2.version}")
            print(f"  Mode: {persona_v2.recommended_mode} (confidence: {persona_v2.mode_confidence:.3f})")
            print(f"  Messages analyzed: {persona_v2.messages_analyzed}")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
            print(f"\n{'='*60}")
            print("STEP 5: Verifying old version deactivation")
            print(f"{'='*60}")
            
            old_persona_check = await db.fetchrow(
                "SELECT * FROM partner_personas WHERE persona_id = $1",
                persona_v1.persona_id
            )
            
            assert not old_persona_check['is_active'], "Old version should be deactivated"
            print("‚úÖ Version 1 correctly deactivated (is_active = False)")
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            active_count = await db.fetchval(
                "SELECT COUNT(*) FROM partner_personas WHERE user_id = $1 AND is_active = TRUE",
                "502312936"
            )
            
            assert active_count == 1, f"Should have exactly 1 active persona, got {active_count}"
            print("‚úÖ Exactly one active persona exists")
            
            print(f"\n{'='*60}")
            print("‚úÖ ALL TESTS PASSED SUCCESSFULLY!")
            print(f"{'='*60}\n")
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_mode_determination_logic(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ StyleVector."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            builder = PartnerPersonaBuilder(db)
            
            print(f"\n{'='*60}")
            print("Testing mode determination algorithm")
            print(f"{'='*60}\n")
            
            # –¢–µ—Å—Ç 1: –í—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Üí creative
            creative_vector = StyleVector(
                playfulness=0.5,
                seriousness=0.5,
                emotionality=0.5,
                creativity=0.8  # > 0.7
            )
            mode, confidence = builder._determine_mode(creative_vector)
            assert mode == "creative", f"Expected 'creative', got '{mode}'"
            assert confidence == 0.8, f"Expected confidence 0.8, got {confidence}"
            print(f"‚úÖ High creativity (0.8) ‚Üí mode: {mode}, confidence: {confidence:.3f}")
            
            # –¢–µ—Å—Ç 2: –í—ã—Å–æ–∫–∞—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å + –Ω–∏–∑–∫–∞—è –∏–≥—Ä–∏–≤–æ—Å—Ç—å ‚Üí expert
            serious_vector = StyleVector(
                playfulness=0.2,  # < 0.3
                seriousness=0.8,  # > 0.7
                emotionality=0.5,
                creativity=0.4
            )
            mode, confidence = builder._determine_mode(serious_vector)
            assert mode == "expert", f"Expected 'expert', got '{mode}'"
            assert confidence == 0.8, f"Expected confidence 0.8, got {confidence}"
            print(f"‚úÖ High seriousness (0.8) + low playfulness (0.2) ‚Üí mode: {mode}, confidence: {confidence:.3f}")
            
            # –¢–µ—Å—Ç 3: –í—ã—Å–æ–∫–∞—è –∏–≥—Ä–∏–≤–æ—Å—Ç—å + –Ω–∏–∑–∫–∞—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å ‚Üí talk
            playful_vector = StyleVector(
                playfulness=0.8,  # > 0.7
                seriousness=0.2,  # < 0.3
                emotionality=0.6,
                creativity=0.4
            )
            mode, confidence = builder._determine_mode(playful_vector)
            assert mode == "talk", f"Expected 'talk', got '{mode}'"
            assert confidence == 0.8, f"Expected confidence 0.8, got {confidence}"
            print(f"‚úÖ High playfulness (0.8) + low seriousness (0.2) ‚Üí mode: {mode}, confidence: {confidence:.3f}")
            
            # –¢–µ—Å—Ç 4: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä ‚Üí talk —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            neutral_vector = StyleVector(
                playfulness=0.5,
                seriousness=0.5,
                emotionality=0.5,
                creativity=0.5
            )
            mode, confidence = builder._determine_mode(neutral_vector)
            assert mode == "talk", f"Expected 'talk', got '{mode}'"
            assert confidence == 0.6, f"Expected confidence 0.6, got {confidence}"  # PERSONA_MODE_MIN_CONFIDENCE
            print(f"‚úÖ Neutral vector (all 0.5) ‚Üí mode: {mode}, confidence: {confidence:.3f}")
            
            print(f"\n{'='*60}")
            print("‚úÖ Mode determination logic works correctly!")
            print(f"{'='*60}\n")
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_new_user_first_persona(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user_id = "test_persona_builder_999"
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            await db.execute(
                "DELETE FROM partner_personas WHERE user_id = $1",
                test_user_id
            )
            
            # –û—á–∏—â–∞–µ–º STM –±—É—Ñ–µ—Ä
            await db.execute(
                "DELETE FROM stm_buffer WHERE user_id = $1",
                test_user_id
            )
            
            print(f"\n{'='*60}")
            print(f"Testing first persona creation for new user: {test_user_id}")
            print(f"{'='*60}\n")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_messages = [
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä",
                "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
                "–û–≥–æ, —ç—Ç–æ –∫—Ä—É—Ç–æ! üî•",
                "–ê –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
                "–°–ø–∞—Å–∏–±–æ, –æ—á–µ–Ω—å –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ!",
                "–ê—Ö–∞—Ö–∞, —Å–º–µ—à–Ω–æ üòÇ"
            ]
            
            for i, msg in enumerate(test_messages):
                await db.execute("""
                    INSERT INTO stm_buffer (user_id, message_type, content, metadata, sequence_number, timestamp)
                    VALUES ($1, 'user', $2, '{}', $3, NOW())
                """, test_user_id, msg, i)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å
            analyzer = StyleAnalyzer(db)
            style_result = await analyzer.analyze_user_style(test_user_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –ø–µ—Ä—Å–æ–Ω—É
            builder = PartnerPersonaBuilder(db)
            first_persona = await builder.build_or_update_persona(
                user_id=test_user_id,
                style_result=style_result
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            assert first_persona.user_id == test_user_id
            assert first_persona.version == 1, f"First persona should have version 1, got {first_persona.version}"
            assert first_persona.is_active
            assert first_persona.predicted_interests == []  # –ó–∞–≥–ª—É—à–∫–∞
            assert first_persona.prediction_confidence == 0.0  # –ó–∞–≥–ª—É—à–∫–∞
            
            print("‚úÖ First persona created successfully:")
            print(f"  User ID: {first_persona.user_id}")
            print(f"  Version: {first_persona.version}")
            print(f"  Mode: {first_persona.recommended_mode}")
            print(f"  Active: {first_persona.is_active}")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await db.execute(
                "DELETE FROM partner_personas WHERE user_id = $1",
                test_user_id
            )
            await db.execute(
                "DELETE FROM stm_buffer WHERE user_id = $1",
                test_user_id
            )
            
            print("\n‚úÖ Test data cleaned up")
            
        finally:
            await db.disconnect()
    
    @pytest.mark.asyncio
    async def test_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã."""
        db = DatabaseConnection()
        await db.connect()
        
        try:
            import time
            
            print(f"\n{'='*60}")
            print("Performance test for PartnerPersonaBuilder")
            print(f"{'='*60}\n")
            
            analyzer = StyleAnalyzer(db)
            builder = PartnerPersonaBuilder(db)
            
            # –ü–æ–ª—É—á–∞–µ–º style_result
            style_result = await analyzer.analyze_user_style("502312936", limit=50)
            
            # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã
            start_time = time.time()
            _ = await builder.build_or_update_persona(
                user_id="502312936",
                style_result=style_result
            )
            build_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            print(f"Build/update time: {build_time:.2f}ms")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–ª–∞–¥—ã–≤–∞–µ–º—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
            assert build_time < 500, f"Persona building too slow: {build_time}ms > 500ms"
            
            if build_time < 50:
                print(f"‚úÖ Excellent performance! ({build_time:.2f}ms)")
            elif build_time < 200:
                print(f"‚úÖ Good performance ({build_time:.2f}ms)")
            else:
                print(f"‚ö†Ô∏è Acceptable but could be optimized ({build_time:.2f}ms)")
            
        finally:
            await db.disconnect()


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    async def run_tests():
        test = TestPartnerPersonaBuilder()
        
        print("\n" + "="*70)
        print(" RUNNING PARTNER PERSONA BUILDER INTEGRATION TESTS ")
        print("="*70)
        
        print("\n[1/4] Running test_persona_building_real_user...")
        await test.test_persona_building_real_user()
        
        print("\n[2/4] Running test_mode_determination_logic...")
        await test.test_mode_determination_logic()
        
        print("\n[3/4] Running test_new_user_first_persona...")
        await test.test_new_user_first_persona()
        
        print("\n[4/4] Running test_performance...")
        await test.test_performance()
        
        print("\n" + "="*70)
        print(" ALL INTEGRATION TESTS COMPLETED SUCCESSFULLY! ")
        print("="*70 + "\n")
    
    asyncio.run(run_tests())