import logging
import sys
from pathlib import Path
from pythonjsonlogger import jsonlogger
from config.settings import (
    LOG_LEVEL, 
    LOG_FORMAT, 
    LOG_DATE_FORMAT,
    ENABLE_JSON_LOGGING,
    JSON_LOG_FILE,
    LOG_ROTATION_ENABLED,
    LOG_MAX_BYTES,
    LOG_BACKUP_COUNT
)
from logging.handlers import RotatingFileHandler


class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ —Å —ç–º–æ–¥–∑–∏"""
    
    # ANSI escape –∫–æ–¥—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    COLORS = {
        'DEBUG': '\033[36m',      # Cyan
        'INFO': '\033[32m',       # Green  
        'WARNING': '\033[33m',    # Yellow
        'ERROR': '\033[31m',      # Red
        'CRITICAL': '\033[35m',   # Magenta
        'RESET': '\033[0m',       # Reset
        'BOLD': '\033[1m',        # Bold
        'DIM': '\033[2m',         # Dim
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    EMOJIS = {
        'DEBUG': 'üêõ',
        'INFO': '‚úì', 
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üî•'
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    COMPONENT_EMOJIS = {
        'actor.UserSession': 'üßü‚Äç‚ôÄÔ∏èÔ∏è',
        'actor.Generation': 'üëΩ',
        'actor.Memory': 'üí≠',
        'actor.Perception': '‚ù§Ô∏è‚Äçüî• ',
        'actor.Telegram': 'ü¶é',
        'actor.Auth': 'üéÉ',
        'actor.LTM': 'üë©‚Äçüé§',
        'actor.Personality': 'ü¶π‚Äç‚ôÄÔ∏è',
        'actor.TalkModel': 'üëπ',
        'actor.System': 'ü§ñ',
        'actor_system': 'üêç',
        'emotion_analyzer': '‚ù§Ô∏è‚Äçüî• ',
        'event_store': 'üìö',
        'sentence_transformers': 'üß†',
        'circuit_breaker': '‚ö°',
        'database.connection': 'üìö',
        'redis.connection': 'ü¶†',
        'default': 'üíé'
    }
    
    def format(self, record):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        component_emoji = self.COMPONENT_EMOJIS['default']
        for component, emoji in self.COMPONENT_EMOJIS.items():
            if component in record.name:
                component_emoji = emoji
                break
        
        # –£—Ä–æ–≤–µ–Ω—å –∏ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã
        level = record.levelname
        level_color = self.COLORS.get(level, self.COLORS['RESET'])
        level_emoji = self.EMOJIS.get(level, '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = self.formatTime(record, self.datefmt)
        colored_time = f"{self.COLORS['DIM']}{time_str}{self.COLORS['RESET']}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ª–æ–≥–≥–µ—Ä–∞
        name_parts = record.name.split('.')
        if len(name_parts) > 2:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
            short_name = f"{name_parts[0]}.{name_parts[-1]}"
        else:
            short_name = record.name
        
        # –¶–≤–µ—Ç–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å
        colored_level = f"{level_color}{self.COLORS['DIM']}{level:8s}{self.COLORS['RESET']}"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        msg = record.getMessage()
        if 'starting' in msg.lower() or 'started' in msg.lower():
            msg = f"‚ú® {msg}"
        elif 'stopping' in msg.lower() or 'stopped' in msg.lower():
            msg = f"Ô∏èüí¢ {msg}"
        elif 'connected' in msg.lower() or 'connection' in msg.lower():
            msg = f"ü™¢ {msg}"
        elif 'registered' in msg.lower() or 'initialized' in msg.lower():
            msg = f"üí• {msg}"
        elif 'error' in msg.lower() or 'failed' in msg.lower():
            msg = f"‚òÑÔ∏è  {msg}"
        elif 'shutdown' in msg.lower() or 'shutdown' in msg.lower():
            msg = f"„äóÔ∏è {msg}"
        
        # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
        if level in ['ERROR', 'CRITICAL']:
            msg = f"{level_color}{msg}{self.COLORS['RESET']}"
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return f"{colored_time} {component_emoji} {level_emoji} {colored_level} {self.COLORS['DIM']}{short_name}{self.COLORS['RESET']} - {msg}"


class SentenceTransformerFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç sentence_transformers"""
    
    def filter(self, record):
        if record.name.startswith('sentence_transformers') and 'Load pretrained' in record.msg:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
            if 'paraphrase-multilingual-MiniLM-L12-v2' in record.msg:
                record.msg = 'Load MiniLM-L12-v2'
        return True


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
_logging_configured = False
_console_handler = None
_json_handler = None


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏ JSON —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    global _logging_configured, _console_handler, _json_handler
    
    if _logging_configured:
        return logging.getLogger()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if ENABLE_JSON_LOGGING:
        log_dir = Path(JSON_LOG_FILE).parent
        log_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ü–≤–µ—Ç–∞ (–¥–ª—è macOS –∏ Linux –≤—Å–µ–≥–¥–∞ True)
    supports_color = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()
    
    if supports_color:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_formatter = ColoredFormatter(datefmt=LOG_DATE_FORMAT)
    else:
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        console_formatter = logging.Formatter(LOG_FORMAT, datefmt=LOG_DATE_FORMAT)
    
    json_formatter = jsonlogger.JsonFormatter(
        '%(asctime)s %(name)s %(levelname)s %(message)s',
        datefmt=LOG_DATE_FORMAT
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    _console_handler = logging.StreamHandler(sys.stdout)
    _console_handler.setFormatter(console_formatter)
    _console_handler.setLevel(LOG_LEVEL)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(LOG_LEVEL)
    root_logger.addHandler(_console_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º JSON –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if ENABLE_JSON_LOGGING:
        if LOG_ROTATION_ENABLED:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RotatingFileHandler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
            _json_handler = RotatingFileHandler(
                JSON_LOG_FILE,
                maxBytes=LOG_MAX_BYTES,
                backupCount=LOG_BACKUP_COUNT,
                encoding='utf-8'
            )
        else:
            # –û–±—ã—á–Ω—ã–π FileHandler –±–µ–∑ —Ä–æ—Ç–∞—Ü–∏–∏
            _json_handler = logging.FileHandler(JSON_LOG_FILE, encoding='utf-8')
        
        _json_handler.setFormatter(json_formatter)
        _json_handler.setLevel(LOG_LEVEL)
        root_logger.addHandler(_json_handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("openai").setLevel(logging.WARNING)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ª–æ–≥–≥–µ—Ä–∞–º
    for logger_name in logging.root.manager.loggerDict:
        logger = logging.getLogger(logger_name)
        logger.handlers = []  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.propagate = True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
    
    _logging_configured = True
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
    # root_logger.info("üê≤ –õ–æ–≥–∏ –≤—ã–≤–æ–¥–∏—Ç –•–∏–º–µ—Ä–∞ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è:")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è sentence_transformers
    logging.getLogger("sentence_transformers")
    st_filter = SentenceTransformerFilter()
    for handler in logging.root.handlers:
        handler.addFilter(st_filter)
    
    return root_logger


def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    logger = logging.getLogger(name)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª–æ–≥–≥–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if _logging_configured:
        logger.handlers = []  # –û—á–∏—â–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.propagate = True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        logger.setLevel(LOG_LEVEL)
    
    return logger